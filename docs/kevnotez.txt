/*
 * Created by kevo on 5/11/2016.
 */

                                ~~~~~~~~~~~~~~~
                                     NOTEz
                                ~~~~~~~~~~~~~~~

5/13
----
* Noticed I had complete admin control on mySQL workbench. very cool.

                                ~~~~~~~~~~~~~~~
                                    API DOCS
                                ~~~~~~~~~~~~~~~

HTTP SETUP FOR FORUM
--------------------
* Come up with IDs for all of the DB fields and documents this, will later be used and expanded upon for API JSDOCS
* Modal buttons for new thread? reply? or will that get annoying if it disappears on a misclick?
* Users don't need a DELETE method
* Only admins can create categories

                                ~~~~~~~~~~~~~~~
                                  REGISTRATION
                                ~~~~~~~~~~~~~~~

* USERNAME (REGEX to only allow letters, numbers and underscores)
  PASSWORD (REGEX to only allow ??)
  CONFIRM PASSWORD
  EMAIL (REGEX to verify it's an actual email, or use a service for this)

*  1. Validate the user data
   2. IF not valid, display error message and indicate error'd fields
   3. If no erros and the data is valid, then save the user info into the user table

* sha1 password hashing in suquelize after validation and pre input into user table

                                ~~~~~~~~~~~~~~~
                                  mySQL SCHEMA
                                ~~~~~~~~~~~~~~~

mySQL SCHEMA FOR USER ACCOUNTS
------------------------------
* Have the mySQL query monitor on my server showing the query log live to the class in a snap window
* USER LEVELS ~ 0 - user //// 1 - admin

* The column in the referencing table the foreign key refers to must be a primary key
* The values that are referred to must exist in the referenced table

FIELDS
-------

USER TABLE
----------
USER TABLE ON CREATION
----------------------
* userId - (PRIMARY KEY)
* userName - (UNIQUE)
* emailAddr (UNIQUE, PRIMARY, AUTO INC)
* password - hashed * salted (mmmm)

PROFILE FOR POST CREATION
-------------------------
* Registration Date
* postCount - this is incremented in the logic controller when someone POSTS a... new post or thread
* avatar
* session - the RCB session you are in
* realName
* location
* favLang

FORUM TABLES
------------
THREAD TABLE
------------

POST TABLE
----------

HELP ROOM TABLES
----------------
GIVE HELP
---------

GET HELP
--------

PROJECT TABLE
-------------

                                ~~~~~~~~~~~~~~~
                                   SEQUELIZE
                                ~~~~~~~~~~~~~~~

const Sequelize = require("sequelize"); // mySQL node.js ORM
const db = new Sequelize("mysql://username:pass@host:port/dbname");


const User = db.define('user', { // create new table in the DB
	firstName: {
		type: db.STRING,
		field: 'first_name' // will result in an attribute that is firstName when user facing but first_name in the database
	},
	lastName: {
		type: db.STRING,
		field: 'last_name'
	}
}, {
	freezeTableName: true // model tableName will be the same as the model name
});

User.sync({force: true}).then(function () {
	// table created
	return User.create({
		firstName: 'test',
		lastName: 'noobertron5000'
	});
});

module.exports = User;